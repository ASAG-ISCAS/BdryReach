/*
 * @Author: your name
 * @Date: 2021-11-11 17:24:27
 * @LastEditTime: 2021-12-28 18:18:30
 * @LastEditors: Please set LastEditors
 * @Description: 打开koroFileHeader查看配置 进行设置:
 * https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE
 * @FilePath: /Solver/test.cpp
 */

#include <plotter/matplotlibcpp.h>
#include <plotter/plotter.h>
#include <underApprox/underApprox.h>


namespace plt = matplotlibcpp;

using namespace std;
using namespace reachSolver;
using namespace capd;
using capd::autodiff::Node;

double k  = 0.015;
double k2 = 0.01;
double g  = 9.81;

void _f(Node/* t*/, Node in[], int /*dimIn*/, Node out[], int/* dimOut*/, Node params[], int noParams){
	out[0] = 0.1 + k2 * (4 - in[5]) - k * sqrt(2 * g) * sqrt(in[0]);
	out[1] = k * sqrt(2 * g) * (sqrt(in[0]) - sqrt(in[1]));
	out[2] = k * sqrt(2 * g) * (sqrt(in[1]) - sqrt(in[2]));
	out[3] = k * sqrt(2 * g) * (sqrt(in[2]) - sqrt(in[3]));
	out[4] = k * sqrt(2 * g) * (sqrt(in[3]) - sqrt(in[4]));
	out[5] = k * sqrt(2 * g) * (sqrt(in[4]) - sqrt(in[5]));
	out[6] = k * sqrt(2 * g) * (sqrt(in[5]) - sqrt(in[6]));
	out[7] = k * sqrt(2 * g) * (sqrt(in[6]) - sqrt(in[7]));
	out[8] = k * sqrt(2 * g) * (sqrt(in[7]) - sqrt(in[8]));
	out[9] = k * sqrt(2 * g) * (sqrt(in[8]) - sqrt(in[9]));
	out[10] = k * sqrt(2 * g) * (sqrt(in[9]) - sqrt(in[10]));
	out[11] = k * sqrt(2 * g) * (sqrt(in[10]) - sqrt(in[11]));
}

void _fBack(Node/* t*/, Node in[], int /*dimIn*/, Node out[], int/* dimOut*/, Node params[], int noParams){
	out[0] = -(0.1 + k2 * (4 - in[5]) - k * sqrt(2 * g) * sqrt(in[0]));
	out[1] = -(k * sqrt(2 * g) * (sqrt(in[0]) - sqrt(in[1])));
	out[2] = -(k * sqrt(2 * g) * (sqrt(in[1]) - sqrt(in[2])));
	out[3] = -(k * sqrt(2 * g) * (sqrt(in[2]) - sqrt(in[3])));
	out[4] = -(k * sqrt(2 * g) * (sqrt(in[3]) - sqrt(in[4])));
	out[5] = -(k * sqrt(2 * g) * (sqrt(in[4]) - sqrt(in[5])));
	out[6] = -(k * sqrt(2 * g) * (sqrt(in[5]) - sqrt(in[6])));
	out[7] = -(k * sqrt(2 * g) * (sqrt(in[6]) - sqrt(in[7])));
	out[8] = -(k * sqrt(2 * g) * (sqrt(in[7]) - sqrt(in[8])));
	out[9] = -(k * sqrt(2 * g) * (sqrt(in[8]) - sqrt(in[9])));
	out[10] =-( k * sqrt(2 * g) * (sqrt(in[9]) - sqrt(in[10])));
	out[11] =-( k * sqrt(2 * g) * (sqrt(in[10]) - sqrt(in[11])));
}


//be care for
int dimIn = 13;

int dimOut = 12;
int noParam = 0;
int MaxDerivativeOrder = 3;

IMap f(_f, dimIn,dimOut,noParam,MaxDerivativeOrder);
IMap fBack(_fBack, dimIn,dimOut,noParam,MaxDerivativeOrder);
int main()
{
    NonlinearSys<double> mysys(f, 12, 0, 12);
	NonlinearSys<double> mysysBack(fBack, 12, 0, 12);

    ReachOptions<double> options;

    //create R0
	Vector_t<double>	 center(12);
	center << 2., 4., 4., 2., 10., 4., 2 , 2, 2, 2, 2, 2;
	Matrix_t<double> generators(Eigen::MatrixXd::Identity(12, 12) * 0.5);
	Zonotope<double> R0_(center, generators);

    options.set_taylor_terms(4);
    options.set_zonotope_order(50);
    options.set_intermediate_order(50);
    options.set_error_order(20);
    options.set_alg("lin");
    options.set_tensor_order(3);

    options.set_tStart(0);

    options.set_R0(R0_);

    options.set_usekrylovError(1);
    options.set_max_error(DBL_MAX*Eigen::MatrixXd::Ones(12,1));
	
	
	plt::figure_size(1200, 780);
	
	clock_t start, end;
	start = clock();


	//80s 312s no full rank 
	// vector<Zonotope<double>> underR = UnderApprox::underReachClp(mysys, mysysBack, options, R0_, 20, 4, 100, 1, 1, 3, 5);

	//80s 693s 能算  0.27
	// vector<Zonotope<double>> underR = UnderApprox::underReachClp(mysys, mysysBack, options, R0_, 20, 4, 100, 1, 0.5, 3, 6);

	//80s 462s 能算 0.20
	// vector<Zonotope<double>> underR = UnderApprox::underReachClp(mysys, mysysBack, options, R0_, 20, 4, 100, 1, 0.5, 3, 3);

	//60s 245s 能算 0.37705
	// vector<Zonotope<double>> underR = UnderApprox::underReachClp(mysys, mysysBack, options, R0_, 30, 2, 100, 1, 1, 3, 5);

	// 不好
	// vector<Zonotope<double>> underR = UnderApprox::underReachClp(mysys, mysysBack, options, R0_, 30, 2, 100, 1, 1, 5, 10);
	//60s this good  0.46733 230s
	vector<Zonotope<double>> underR = UnderApprox::underReachClp(mysys, mysysBack, options, R0_, 30, 2, 100, 1, 1, 5, 5);

	//40s 0.60566 158.67
	// vector<Zonotope<double>> underR = UnderApprox::underReachClp(mysys, mysysBack, options, R0_, 40, 1, 100, 1, 1, 5, 5);
	
	//40s 0.67662 152 this good 
	// vector<Zonotope<double>> underR = UnderApprox::underReachClp(mysys, mysysBack, options, R0_, 20, 2, 100, 1, 1, 3, 5);

	//100s 1701s 
	// vector<Zonotope<double>> underR = UnderApprox::underReachClp(mysys, mysysBack, options, R0_, 25, 4, 0.2, 1, 0.5, 5, 10);

// 	[1.649762650631145 0.01449030234385178 -0.02457871093045606 -0.01952073863886537 -0.01101630523837062 -0.004841767500199975 -0.001729025272279182 0 0 0 0 0 0 ;
// 1.977226304153753 0.04537578954038449 -0.02851925318442342 -0.01406364792313505 -0.006329817772767651 -0.002244287316979071 0.01847405738456049 0 0 0 0 0 0 ;
// 2.671580368040233 0.05695056125624282 -0.02164834506984844 -0.007525098981091674 -0.002798142797914623 0.0238005412142253 0.0444919062279038 0 0 0 0 0 0 ;
// 3.037278185235899 0.03712623223730763 -0.01026576186897707 -0.002755353098693947 0.01958873768588939 0.04335775903052524 0.04111811435234541 0 0 0 0 0 0 ;
// 4.456133813489244 0.01829173686552961 -0.003901892333071454 0.04323656451041544 0.05249601485091483 0.04530069200239808 0.02688049142016604 0 0 0 0 0 0 ;
// 5.407259444301419 0.005746714757751329 0.04015579068661687 0.05887422736805906 0.04273220756265748 0.02396268899012477 0.01045196214551962 0 0 0 0 0 0 ;
// 4.76074076911699 0.001320432540718749 0.05222027309872899 0.03608826994406787 0.01937888133962851 0.008191766665859421 0.002846218243577994 0.0149965087768661 0 0 0 0 0 ;
// 3.669582779676575 0.000275780781855942 0.03789521146674364 0.01648502678108726 0.007025741696213921 0.002382969809912922 0.0006872505566801538 0.02301803614050943 0.01125492411937449 0 0 0 0 ;
// 2.847723330070376 5.800334015283471e-05 0.02194607167512045 0.006772056779477985 0.002377217145045619 0.0006699349915865759 0.0001644539717551715 0.02088614617229838 0.02055346801034416 0.01627723292778504 0 0 0 ;
// 2.360840785384266 1.249357704541297e-05 0.01115398152338108 0.002626267229750541 0.000779644031141112 0.0001870864260062547 3.981530128686466e-05 0.01456134221738132 0.02141618268099648 0.03362181524216564 0.003837972908182743 0 0 ;
// 2.108166795967628 2.688749759593231e-06 0.005026988031815879 0.0009512012170187842 0.0002440700735000476 5.087169624776971e-05 9.531117275885986e-06 0.008331594128342893 0.0161783465683937 0.03766861763400807 0.008522238857013415 0.007025580787896393 0 ;
// 2.0066390252083 5.590490000664387e-07 0.001988363915419602 0.0003141177868664224 7.095798543030014e-05 1.306345529197653e-05 2.183646821426322e-06 0.003981049199986797 0.009542977698649957 0.02929285839075486 0.009861496844479385 0.01617093546674549 0.002055090902749461 ;]


	//100s 1385s
	// vector<Zonotope<double>> underR = UnderApprox::underReachClp(mysys, mysysBack, options, R0_, 25, 4, 0.2, 1, 0.5, 5, 8);
// 	[1.656516587234457 0.01422160294352028 -0.0253828387044525 -0.01965279023985434 -0.00598866332249206 -0.00463068692383723 -0.001996794554622436 0 0 0 0 0 0 ;
// 1.979743891956484 0.04446522111944586 -0.0294116361649567 -0.01413224635361982 -0.003433403180824694 -0.002141138932304832 0.02123836617124014 0 0 0 0 0 0 ;
// 2.669395254918118 0.05578435681288933 -0.02231978677217194 -0.007558025469262596 -0.00151659778805752 0.02267404744893008 0.05112310333499868 0 0 0 0 0 0 ;
// 3.021665286774413 0.03633178065723307 -0.01057908504963451 -0.002766558561996994 0.01058351337517653 0.04121659741924111 0.04717880568563164 0 0 0 0 0 0 ;
// 4.422484880558233 0.01794433679663829 -0.004031625907454231 0.04333203991019332 0.02842313330453094 0.04315518462299664 0.0309132435730378 0 0 0 0 0 0 ;
// 5.380193971184184 0.005660828875851416 0.04137205751875583 0.05920863802226305 0.02321561875904668 0.02291006776845512 0.01206676746142615 0 0 0 0 0 0 ;
// 4.764197753634685 0.001303088854549616 0.05389680743368438 0.03634105794751161 0.01054116281435158 0.00784211947551065 0.003291061379281429 0.0285787584881292 0 0 0 0 0 ;
// 3.694989023082892 0.0002721028208931774 0.03911427402543966 0.01659591370429939 0.003819996077352206 0.002280068420739185 0.0007943308877012663 0.04387616272084526 0.003332319255051578 0 0 0 0 ;
// 2.879793555090455 5.72074415200046e-05 0.02265210983679236 0.006816341963530178 0.001292103627657697 0.0006407008292187826 0.0001899830203638138 0.03981350447003229 0.006085038058783249 0 0 0.01542418773330363 0 ;
// 2.392522452383762 1.232023408011037e-05 0.01150657496202996 0.002642553738175458 0.0004236520663494241 0.0001788736973107925 4.598445326323483e-05 0.02773078392217704 0.006330769675482559 0 0.00433737440824046 0.03178366043268314 0 ;
// 2.13537011406431 2.656175793705231e-06 0.005193975548296197 0.000958716491769747 0.000132858109996269 4.872355708068872e-05 1.102706778197015e-05 0.01588822877273133 0.004787676171939038 0.007116013334321427 0.00963483545882394 0.03563675831025265 0 ;
// 2.012401621452658 5.545221512642647e-07 0.002063031460766388 0.0003179394249008933 3.878921380936356e-05 1.256411727358034e-05 2.536748455048175e-06 0.007622850048352042 0.00283513875844623 0.0164370709403428 0.01118755664608409 0.02781497872862248 0.007013648078139888 ;]

	//100s 1073s
	// vector<Zonotope<double>> underR = UnderApprox::underReachClp(mysys, mysysBack, options, R0_, 25, 4, 0.2, 1, 0.5, 4, 8);
// 	[1.660989484733432 0.01405010523423421 -0.0261008163153499 -0.01859419940090178 -0.003941057823866359 -0.0006962854921502569 -0.001804290036072558 0 0 0 0 0 0 ;
// 1.983701716114369 0.04393147598763373 -0.030243137754967 -0.01336945964588859 -0.002259095163485095 -0.0003218853769739607 0.01919647377407551 0 0 0 0 0 0 ;
// 2.662559818348214 0.05509539163986864 -0.02294275229724289 -0.007147248247419879 -0.0009974483651356365 0.003409866329347463 0.04619117339983601 0 0 0 0 0 0 ;
// 3.002135196467461 0.03586661840426847 -0.01086966673445724 -0.002615057092765537 0.006962951602033969 0.006194797252592981 0.04260649615992463 0 0 0 0 0 0 ;
// 4.395877473446695 0.01771505159913616 -0.004142510932544427 0.04098233978302031 0.01869761359655681 0.006485981008916262 0.02791763715665593 0 0 0 0 0 0 ;
// 5.362863605400732 0.005590521336661138 0.04252832392065066 0.05600637585117294 0.01527479159083781 0.003444134844755869 0.01090096144968208 0 0 0 0 0 0 ;
// 4.756189789860681 0.001287340384453403 0.05541168100978967 0.03438103483247446 0.006936816155253563 0.001179190614635595 0.002973951925775286 0.02813708471981402 0 0 0 0 0 ;
// 3.685459546394363 0.0002687758441636583 0.04017286586229174 0.01569012820454821 0.002512514769447642 0.0003427168852854266 0.000717616688635939 0.04313203773978392 0.008301397661534062 0 0 0 0 ;
// 2.857527576982593 5.65116073735428e-05 0.02325111417380951 0.006441875554913697 0.0008496390775098949 9.629033038623364e-05 0.0001716294903424196 0.03910252408704631 0.01513862390469053 0.007360153330684851 0 0 0 ;
// 2.360493475641667 1.220763444785242e-05 0.01183994136981075 0.002504255442343692 0.0002793851547342627 2.696288039889995e-05 4.166785003553646e-05 0.0272919634664816 0.01577588473935853 0.01518745434416818 0.004934562063940008 0 0 ;
// 2.111119529303893 2.64945519006197e-06 0.005372885542847853 0.0009138665388388573 8.815901793463259e-05 7.39176443511493e-06 1.005780762005968e-05 0.01571126835746719 0.01198169030754126 0.0170961562643757 0.01100368514918936 0.01140074345049716 0 ;
// 2.013003324803671 5.571213490113772e-07 0.00214458790288925 0.0003047578343846409 2.589631215976977e-05 1.91865085348099e-06 2.329906337717502e-06 0.007571022183828127 0.007123916508805606 0.01339580815361756 0.01282773379515961 0.02644395303843922 0.009009607758053097 ;]

	//100s 1120s
	// vector<Zonotope<double>> underR = UnderApprox::underReachClp(mysys, mysysBack, options, R0_, 25, 4, 0.2, 1, 0.5, 5, 6);
// 		[1.651113224707645 0.01372514683534259 -0.02561604337310134 -0.01805012386238081 -0.01190514344725759 -0.005046761207612384 -0.0007650476426707337 0 0 0 0 0 0 ;
// 1.966867624478627 0.04290667471299184 -0.02967707532635228 -0.01298508709194131 -0.006830467094554156 -0.002335664656682325 0.008148881125825376 0 0 0 0 0 0 ;
// 2.647141723884154 0.05389201132559226 -0.02255321550061119 -0.006958046423587831 -0.003024245647202429 0.02472646695373273 0.01963219423934175 0 0 0 0 0 0 ;
// 3.014168786406503 0.03521731518315817 -0.01072447609116661 -0.002555749051342821 0.02111506249396795 0.04513331001372555 0.01818233323245629 0 0 0 0 0 0 ;
// 4.439327173357473 0.01737885624358787 -0.004083242187133023 0.03993763840106374 0.0567052641504589 0.0472317803923117 0.01190476848441965 0 0 0 0 0 0 ;
// 5.399639484858036 0.005459220893945429 0.04183691390620532 0.05444250997919754 0.04619376402865463 0.02499299679594165 0.004629175820448925 0 0 0 0 0 0 ;
// 4.772911977670371 0.001253150587547345 0.0544259426103753 0.03337306462853565 0.0209455942893688 0.008540250831290707 0.001259666369051406 0.0268031397753851 0 0 0 0 0 ;
// 3.702881025562626 0.0002614818767526406 0.0394938497136031 0.01524170520366515 0.007591331220347 0.002483083893210625 0.0003039383690800875 0.0411410267091798 0.01955993600419195 0 0 0 0 ;
// 2.8903270804507 5.49598641717422e-05 0.02286972612971471 0.006260240279131227 0.00256796947211085 0.0006978326439067129 7.269374713191547e-05 0.03732842974038639 0.03571834863372771 0.01482419075537472 0 0 0 ;
// 2.411581500464692 1.18335680875033e-05 0.01162273714922758 0.002427560811583791 0.0008420962485236256 0.000194839974449081 1.759471292285534e-05 0.02602323967992581 0.03721576374708457 0.03061882188346743 0.01157149066928949 0 0 ;
// 2.169067350060832 2.546274071310488e-06 0.005238181806475861 0.0008792140932362914 0.0002636113643461993 5.297648764261887e-05 4.211404931930752e-06 0.01488953304898334 0.02811314696260959 0.03430319064239802 0.02569365019280976 0.009017850315304967 0 ;
// 2.061945838629835 5.292588501381992e-07 0.00207100997368417 0.0002902367263827679 7.661308019681981e-05 1.359963141008637e-05 9.64565105003772e-07 0.007111113804640751 0.01657364041825812 0.02665885650211056 0.02970978904058296 0.02073921782838091 0.006345857741816131 ;]

	//100s 377s
	// vector<Zonotope<double>> underR = UnderApprox::underReachClp(mysys, mysysBack, options, R0_, 25, 4, 100, 1, 1, 3, 5);
	end = clock();
	cout << "time cost: " << (double) (end - start) / CLOCKS_PER_SEC << endl;

	for(int i = 1; i < underR.size(); i++){
		Plotter::plotZonotope(underR[i], 1, 2, "g");
	}
	// Plotter::plotZonotope(newZ, 1, 2, "g");
	Plotter::plotZonotope(R0_, 1, 2, "k");
	plt::show();
}
